var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#TriLayout","page":"API","title":"TriLayout","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TriMatrices.TriLayout\nTriUpper\nTriLower\nTriSymmetric\nTriMatrices.hasdiag\nTriMatrices.nelems","category":"page"},{"location":"api/#TriMatrices.TriLayout","page":"API","title":"TriMatrices.TriLayout","text":"abstract type TriLayout\n\nAbstract type which indicates how a TriMatrix's values are layed out in memory. Type parameter is a Bool indicating whether the matrix diagonal is stored.\n\n\n\n\n\n","category":"type"},{"location":"api/#TriMatrices.TriUpper","page":"API","title":"TriMatrices.TriUpper","text":"struct TriUpper{D} <: TriMatrices.TriLayout{D}\n\nThe upper triangle of the matrix is stored, values beneath the diagonal are zero.\n\n\n\n\n\n","category":"type"},{"location":"api/#TriMatrices.TriLower","page":"API","title":"TriMatrices.TriLower","text":"struct TriLower{D} <: TriMatrices.TriLayout{D}\n\nThe lower triangle of the matrix is stored, values above the diagonal are zero.\n\n\n\n\n\n","category":"type"},{"location":"api/#TriMatrices.TriSymmetric","page":"API","title":"TriMatrices.TriSymmetric","text":"struct TriSymmetric{D} <: TriMatrices.TriLayout{D}\n\nMatrix is symmetric across the diagonal, one value is stored for each pair of non-diagonal entries.\n\n\n\n\n\n","category":"type"},{"location":"api/#TriMatrices.hasdiag","page":"API","title":"TriMatrices.hasdiag","text":"hasdiag(::Type{<:TriLayout})\nhasdiag(layout::TriLayout)\n\nCheck if the given layout/layout type stores values along the diagonal.\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.nelems","page":"API","title":"TriMatrices.nelems","text":"nelems(_::Type{L<:TriMatrices.TriLayout}, n::Integer) -> Any\n\n\nGet the number of elements needed to store the data of a TriMatrix with the given layout.\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrix","page":"API","title":"TriMatrix","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TriMatrix","category":"page"},{"location":"api/#TriMatrices.TriMatrix","page":"API","title":"TriMatrices.TriMatrix","text":"struct TriMatrix{T, L<:TriMatrices.TriLayout, A} <: AbstractArray{T,2}\n\nA triangular or symmetric matrix which stores data non-redundantly in a contiguous linear array.\n\n\n\n\n\n","category":"type"},{"location":"api/#Methods","page":"API","title":"Methods","text":"","category":"section"},{"location":"api/#Indexing","page":"API","title":"Indexing","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TriMatrices.Indexing.check_tri_index\nTriMatrices.Indexing.car2lin\nTriMatrices.Indexing.car2lin_unchecked\nTriMatrices.Indexing.lin2car\nTriMatrices.Indexing.tri_indices\nTriMatrices.Indexing.TriIndexIterator\nTriMatrices.Indexing.trinum\nTriMatrices.Indexing.triinv\nTriMatrices.Indexing.triinv_strict\nTriMatrices.Indexing.triinv_rem","category":"page"},{"location":"api/#TriMatrices.Indexing.check_tri_index","page":"API","title":"TriMatrices.Indexing.check_tri_index","text":"check_tri_index(Bool, layout::TriLayout, i, j)::Bool\n\nCheck whether a row/column index is within the stored region of a TriMatrix with the given layout. Assumes the index is otherwise valid for the corresponding matrix size.\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.car2lin","page":"API","title":"TriMatrices.Indexing.car2lin","text":"car2lin(layout::TriLayout, i::Integer, j::Integer)\ncar2lin(layout::TriLayout, idx::CartesianIndex{2})\n\nConvert Cartesian row/column indices of a TriMatrix with the given layout to a linear index of its data array.\n\nThis function is the inverse of lin2car.\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.car2lin_unchecked","page":"API","title":"TriMatrices.Indexing.car2lin_unchecked","text":"car2lin_unchecked(layout::TriLayout, i::Integer, j::Integer)\ncar2lin_unchecked(layout::TriLayout, idx::CartesianIndex{2})\n\nLike car2lin, but somewhat faster because it does not check that the index is within the data region of the matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.lin2car","page":"API","title":"TriMatrices.Indexing.lin2car","text":"lin2car(layout::TriLayout, i::Integer)\n\nConvert linear index of the data array of a TriMatrix with the given layout to the corresponding Cartesian index.\n\nThis function is the inverse of car2lin.\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.tri_indices","page":"API","title":"TriMatrices.Indexing.tri_indices","text":"tri_indices(layout::TriMatrices.TriLayout, n::Integer) -> TriMatrices.Indexing.TriIndexIterator\n\n\nIterate over the cartesian indices of a TriMatrix corresponding to the linear indices of its data array, in order.\n\nThis should be equivalent to the following generator expression:\n\n(lin2car(layout, i) for i in 1:nelems(layout, n))\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.TriIndexIterator","page":"API","title":"TriMatrices.Indexing.TriIndexIterator","text":"Iterator over Cartesian indices of the stored region of a TriMatrix in an order corresponding to the elements of its data array. Created with the tri_indices function.\n\n\n\n\n\n","category":"type"},{"location":"api/#TriMatrices.Indexing.trinum","page":"API","title":"TriMatrices.Indexing.trinum","text":"trinum(n::Integer) -> Any\n\n\nGet the nth triangular number.\n\nSee also\n\ntriinv\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.triinv","page":"API","title":"TriMatrices.Indexing.triinv","text":"triinv(t::Integer) -> Any\n\n\nGet the largest n such that t >= trinum(n).\n\nSee also\n\ntriinv_strict, trinum\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.triinv_strict","page":"API","title":"TriMatrices.Indexing.triinv_strict","text":"triinv_strict(t::Integer) -> Any\n\n\nGet n such that t is the nth triangular number. If t is not a triangular number, throw a DomainError.\n\nSee also\n\ntriinv, trinum\n\n\n\n\n\n","category":"function"},{"location":"api/#TriMatrices.Indexing.triinv_rem","page":"API","title":"TriMatrices.Indexing.triinv_rem","text":"triinv_rem(t::Integer) -> Tuple{Any,Any}\n\n\nGet n and r >= 0 such that t == trinum(n) + r and t < trinum(n + 1).\n\nSee also\n\ntriinv, trinum\n\n\n\n\n\n","category":"function"},{"location":"#TriMatrices","page":"TriMatrices","title":"TriMatrices","text":"","category":"section"}]
}
